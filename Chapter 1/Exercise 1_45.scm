#lang planet neil/sicp
(define (newton-transform g)
  (lambda (x) (- x (/ (g x) ((deriv g) x)))))
(define (deriv g)
  (lambda (x) (/ (- (g (+ x dx)) (g x)) dx)))
(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))
(define tolerance 0.00001)
(define dx 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(define (average-damp f) (lambda (x) (average x (f x))))
(define (average a b) (/ (+ a b) 2))
(define (sqrt x)
  (fixed-point (average-damp (lambda (y) (/ x y))) 1.0))
(define (repeated f n)
    (if (= n 1)
        f
        (compose f (repeated f (- n 1))))) 
(define (compose f g)
  (lambda (x) (f (g x))))

(define (root-n n x)
  (let ((m (floor (/ (log n) (log 2)))))
  (fixed-point ((repeated average-damp m) (lambda (y) (/ x (expt y (- n 1))))) 1.0)))

(root-n 2 49)
(root-n 3 1000)
(root-n 4 625)
(root-n 8 65536)